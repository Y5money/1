--[[
                ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà                
          ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà            
      ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà          
        ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà        
          ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà              ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä        ‚¢Ä‚°¥‚†û‚¢≥‚†Ä‚†Ä
        ‚ñà‚ñà‚ñà‚ñà‚ñì‚ñì‚ñì‚ñì‚ñí‚ñí‚ñì‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñì‚ñí‚ñí‚ñì‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà                           ‚†Ä‚°î‚†ã‚†Ä‚¢∞‚†é‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
      ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñì‚ñí‚ñí‚ñì‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñì‚ñí‚ñí‚ñì‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà      ‚†Ä                  ‚£º‚¢Ü‚£§‚°û‚†É‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
    ‚ñì‚ñì‚ñà‚ñà‚ñà‚ñà‚ñì‚ñì‚ñí‚ñí‚ñì‚ñì‚ñì‚ñì‚ñà‚ñà‚ñà‚ñà‚ñì‚ñì‚ñì‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí‚ñì‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà    ‚†Ä‚†Ä                  ‚£º‚¢Ü‚£§‚°û‚†É‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
    ‚ñà‚ñà‚ñà‚ñà‚ñì‚ñì‚ñí‚ñí‚ñì‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚†Ä‚†Ä‚†Ä‚†Ä               ‚£º‚¢†‚†ã‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
    ‚ñà‚ñà‚ñà‚ñà‚ñì‚ñì‚ñí‚ñí‚ñì‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñì‚ñí‚ñí‚ñì‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñì‚ñì‚ñì‚ñà‚ñà‚ñà‚ñà    ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£Ä‚£æ‚¢≥‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚¢†‚†É‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
    ‚ñà‚ñà‚ñà‚ñà‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñì‚ñí‚ñí‚ñì‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñì‚ñà‚ñà‚ñà‚ñà    ‚†Ä ‚£Ä‚°§‚†¥‚†ä‚†â‚†Ä‚†Ä‚†à‚†≥‚°Ä‚†Ä‚†Ä‚†ò‚¢é‚†¢‚£Ä‚£Ä‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñì‚ñí‚ñí‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñì‚ñà‚ñà‚ñà‚ñà       ‚†≥‚£Ñ‚†Ä‚†Ä‚°†‚°§‚°Ä‚†Ä‚†ò‚£á‚°Ä‚†Ä‚†Ä‚†Ä‚†â‚†ì‚†í‚†∫‚†≠‚¢µ‚£¶‚°Ä‚†Ä‚†Ä‚†Ä
      ‚ñà‚ñà‚ñà‚ñà‚ñì‚ñì‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà   ‚†Ä     ‚¢π‚°Ü‚†Ä‚¢∑‚°á‚†Å‚†Ä‚†Ä‚£∏‚†á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚¢§‚†Ä‚†Ä‚†ò‚¢∑‚£Ü‚°Ä‚†Ä
      ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà      ‚†Ä    ‚†ò‚†í‚¢§‚°Ñ‚†ñ‚¢æ‚£≠‚£§‚£Ñ‚†Ä‚°î‚¢¢‚†Ä‚°Ä‚†é‚£∏‚†Ä‚†Ä‚†Ä‚†Ä‚†π‚£ø‚°Ä
        ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñí‚ñí  ‚ñà‚ñà‚ñà‚ñà  ‚ñí‚ñí‚ñà‚ñà    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà      ‚†Ä    ‚¢Ä‚°§‚†ú‚†É‚†Ä‚†Ä‚†ò‚†õ‚£ø‚¢∏‚†Ä‚°º‚¢†‚†É‚£§‚°ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚°á
      ‚ñì‚ñì‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë    ‚ñà‚ñà‚ñà‚ñà    ‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà    ‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë      ‚†Ä    ‚†∏‚†∂‚†ñ‚¢è‚†Ä‚†Ä‚¢Ä‚°§‚†§‚†á‚£¥‚†è‚°æ‚¢±‚°è‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚£ø‚†É
    ‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñà‚ñà‚ñí‚ñí‚ñë‚ñë                    ‚ñë‚ñë‚ñí‚ñí‚ñà‚ñà‚ñë‚ñë  ‚ñë‚ñë   ‚†Ä‚†Ä‚†Ä       ‚†à‚£á‚°Ä‚†ø‚†Ä‚†Ä‚†Ä‚°Ω‚£∞‚¢∂‚°º‚†á‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚£ø‚†ü‚†Ä
    ‚ñì‚ñì‚ñà‚ñà‚ñà‚ñà‚ñì‚ñì‚ñà‚ñà‚ñí‚ñí‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë  ‚ñë‚ñë  ‚ñë‚ñë‚ñí‚ñí‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë    ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä     ‚†à‚†≥‚¢§‚£Ä‚°∂‚†§‚£∑‚£Ö‚°Ä‚†Ä‚†Ä‚†Ä‚£Ä‚°†‚¢î‚†ï‚†Å‚†Ä‚†Ä
      ‚ñì‚ñì‚ñà‚ñà‚ñà‚ñà‚ñì‚ñì‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí‚ñí‚ñí‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñí‚ñí‚ñí‚ñí‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë    ‚ñë‚ñë      ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä        ‚†à‚†ô‚†´‚†ø‚†ø‚†ø‚†õ‚†ã‚†Å‚†Ä‚†Ä‚†Ä‚†Ä
        ‚ñì‚ñì‚ñà‚ñà‚ñì‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë  ‚ñë‚ñë        ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£Ä‚£§‚£¥‚£∂‚£∂‚£∂‚£∂‚£§‚£∂‚£§‚£Ñ‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
          ‚ñì‚ñì‚ñì‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë                   ‚†Ä‚¢Ä‚£†‚£∂‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∂‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
            ‚ñì‚ñì‚ñí‚ñí  ‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí‚ñà‚ñà‚ñà‚ñà  ‚ñí‚ñí‚ñà‚ñà‚ñë‚ñë                  ‚£∞‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†ü‚†â‚†ô‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ü‚¢ø‚£ø‚£Ü‚†Ä‚†Ä‚†Ä‚†Ä
          ‚ñì‚ñì‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë               ‚£º‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£Ñ‚£Ä‚£§‚£æ‚£ø‚°ø‚†ã‚†â‚†â‚†â‚†ë‚†®‚£ø‚£ø‚£∑‚°Ä‚†Ä‚†Ä
        ‚ñà‚ñà  ‚ñà‚ñà‚ñì‚ñì‚ñí‚ñí‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà        ‚†Ä    ‚¢†‚¢π‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†è‚†Ä‚†Ä‚†Ä‚£†‚°∂‚¢§‚°Ä‚†Ä‚†ª‚£ø‚£ø‚°Ñ‚†Ä
      ‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí  ‚ñí‚ñí‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí  ‚ñí‚ñí‚ñà‚ñà‚ñà‚ñà          ‚†Ä‚£æ‚†ã‚£∏‚£ø‚£ø‚°ø‚£ø‚£Ñ‚£∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚¢π‚£ß‚£¥‚†á‚†Ä‚†Ä‚¢ª‚£ø‚£ß‚†Ä
      ‚ñà‚ñà  ‚ñà‚ñà‚ñí‚ñí‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí‚ñà‚ñà  ‚ñà‚ñà          ‚¢∞‚£ø‚£ø‚£ø‚£ø‚°ü‚†Ä‚†à‚†â‚†õ‚†ª‚¢ø‚£ø‚£ø‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚†â‚¢ª‚°ß‚†Ä‚†Ä‚¢∏‚£ø‚£ø‚†Ä
        ‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí    ‚ñí‚ñí‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà             ‚¢∏‚°ø‚£ø‚£ø‚£ø‚£∑‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚¢®‚£ø‚£ø‚£ø‚£ø‚£ß‚†Ä‚†Ä‚†Ä‚†ô‚†∑‚†æ‚†É‚†Ä‚†Ä‚£º‚£ø‚£ø‚†Ç
          ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí‚ñë‚ñë‚ñë‚ñë‚ñí‚ñí‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà              ‚†∏‚†á‚†â‚¢ª‚£ø‚£ø‚£∑‚£§‚°Ä‚†Ä‚†Ä‚£∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£Ñ‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£º‚£ø‚£ø‚°ü‚†Ä
            ‚ñí‚ñí    ‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí‚ñà‚ñà‚ñà‚ñà    ‚ñí‚ñí            ‚†Ä‚†Ä   ‚†Ä‚†Ä‚†ò‚†õ ‚¢ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£∂‚£∂‚£ø‚£ø‚£ø‚£ø‚£ø‚†á‚†Ä
            ‚ñà‚ñà‚ñí‚ñí‚ñí‚ñí  ‚ñí‚ñí‚ñí‚ñí‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí‚ñí‚ñí  ‚ñí‚ñí‚ñí‚ñí‚ñà‚ñà            ‚†Ä‚†Ä  ‚†Ä‚†Ä‚†Ä  ‚¢æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†è‚†Ä‚†Ä
              ‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñà‚ñà‚ñì‚ñì              ‚†Ä‚†Ä‚†Ä  ‚†Ä  ‚†Ä‚†ò‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†É‚†Ä‚†Ä‚†Ä
                ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà                ‚†Ä         ‚†à‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†è‚†Ä‚†Ä‚†Ä‚†Ä
                  ‚ñà‚ñà‚ñà‚ñà        ‚ñà‚ñà‚ñà‚ñà                             ‚†Ä‚†∂‚£§‚£≠‚£≠‚£â‚£â‚£â‚£õ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
                  ‚†Ä                                                ‚†â‚†õ‚†ª‚†ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†ü‚†õ‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä                                                   
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä                                                  
  ‚†Ä‚†Ä
--]]

local plr = game:GetService("Players").LocalPlayer
local cclosure = syn_newcclosure or newcclosure or nil
if not cclosure or not hookmetamethod then
    plr:Kick("\nUnsupported Exploit")
end
local localPlayer = game:GetService("Players").LocalPlayer
local item1 = "pokeball"
local qy = 1
local _p = nil
for _, v in pairs(getgc(true)) do
    if typeof(v) == "table" then
        if rawget(v, "PlayerData") then
            _p = v
            break
        end
    end
end

local forcebattle = function(player)
    _p.Network:post("BattleRequest",player,{accepted = true})
end;

local forcetrade = function(player)
    _p.Network:post("TradeRequest",player,{accepted = true})
end;

local chunkrev = function(obj)
    spawn(function()
            _p.Network:get("DataRequest",{"ChunkReceived",obj})
    end)
end;

local autowin = function(splayer)
    local battle = _p.Battle.currentBattle
    battle:send("forfeit", splayer)
end;

local spawnitem = function(itemid, q)
    for i = 1, q do
        _p.Network:get("PDS", "giveItem", itemid, 1, true)
        _p.Network:get("PDS", "takeItem", 1)
    end
end;

local spawntix = function(q)
    _p.Network:get("PDS", "AlolanReward", q / 2)
end;

local changetitle = function(text, color)
    _p.Network:post("UpdateTitle","Winner" .. text .. "Winner", color)
end;

local spoofbattlejoin = function(splayer)
    _p.Battle.currentBattle:send("forfeit","join",splayer,"spoofed",{1})
end;

local beatgym = function(gym)
    local index = {109, 112, 113, 98, 126, 147,154, 173}
    local battle =
    _p.Network:get("BattleFunction","new",{["expShare"] = false,["battleType"] = 1,["nnalp"] = false,["isDay"] = true,["chunkId"] = "chunk1",["regionId"] = "Route 1",["trainerId"] = index[gym] or 1})
    _p.Network:post("BattleEvent", battle.battleId, "join", 1, ";)")
    wait(1)
    _p.Network:post("BattleEvent", battle.battleId, "forfeit", "p2")
    _p.Network:post("BattleEvent", battle.battleId, "destroy")
end

local oldNamecall
oldNamecall = hookmetamethod(game, "__namecall", cclosure(function(self,...)
   local NamecallMethod = getnamecallmethod()
   local args = {...}
   
   if (NamecallMethod == "Kick" or NamecallMethod == "kick") and not checkcaller() then
       if self ~= plr then
           return oldNamecall(self,...)
       end
       return
   end
   
   return oldNamecall(self,...)
end))

game:GetService("ScriptContext"):SetTimeout(0.1)
local Mercury = loadstring(game:HttpGet("https://raw.githubusercontent.com/bigbootylatinas/8-Ball/main/main"))()
if syn and syn.protect_gui then
    syn.protect_gui(game:GetService("CoreGui"))
    syn.protect_gui(game:GetService("StarterGui"))
end
wait(.4)

local GUI =
    Mercury:Create {
    Name = "üé±  Dev Testing",
    Size = UDim2.fromOffset(580, 370),
    Theme = Mercury.Themes.Ball,
    Link = "https://8m.cc"
    
}

local Tab =
    GUI:Tab {
    Name = "Main",
    Icon = "rbxassetid://12315840678"
}

GUI:set_Status("üé±  Active")

Tab:Button {
    Name = "Hide/Unhide Buttonüëª",
    Description = nil,
    Callback = function()
        local Material =
            loadstring(game:HttpGet("https://raw.githubusercontent.com/Kinlei/MaterialLua/master/Module.lua"))()

        local UI =
            Material.Load(
            {
                Title = "Minimize Mewhub",
                Style = 4,
                SizeX = 180,
                SizeY = 80,
                Theme = "Dark"
            }
        )

        local Page =
            UI.New(
            {
                Title = "Main"
            }
        )

        Page.Button(
            {
                Text = "üëª hide/unhide",
                Callback = function()
                    game:GetService("VirtualInputManager"):SendKeyEvent(true, Enum.KeyCode.LeftAlt, false, game)
                end
            }
        )
    end
}

local section = Tab:section{
    Name = "Main" -- default
  }

  section:Button {
    Name = "Heal üíü",
    Description = nil,
    Callback = function()
        GUI:Notification
        {
            Title = "Notification",
            Text = "Your pokemon has been healed.",
            Duration = 6,
        }
        _p.Network:get("PDS", "getPartyPokeBalls")
        
    end
}

section:Button {
    Name = "save üíæ",
    Description = nil,
    Callback = function()
        GUI:Notification
        {
            Title = "Notification",
            Text = "Your data has been saved üíæ.",
            Duration = 6,
        }
    _p.PlayerData:save()
    
    syn.secure_call(_p.saveGame)
    _p.Menu:enable()
    _p.MasterControl.WalkEnabled = true
    end
}

section:Button {
    Name = "Open Map üó∫Ô∏è",
    Description = nil,
    Callback = function()
        _p.Menu.Map:fly()
        _p.Menu:enable()
        _p.MasterControl.WalkEnabled = true
    end
}
section:Button {
    Name = "Unstuck üîì",
    Description = nil,
    Callback = function()
        GUI:Notification
        {
            Title = "Notification",
            Text = "You're now unstuck.",
            Duration = 6,
        }

        _p.Menu.options:getUnstuck(true)
        _p.Menu:enable()
        _p.MasterControl.WalkEnabled = true
    end
}
section:Toggle {
    Name = "Toggle Repel üèÉüê∂",
    StartingState = false,
    Description = nil,
    Callback = function(value)
        if value then
            GUI:Notification
        {
            Title = "Notification",
            Text = "Repel is enabled.",
            Duration = 6,
        }
            
            _p.Repel.steps = 1000000
            
        else
            GUI:Notification
        {
            Title = "Notification",
            Text = "Repel is disabled.",
            Duration = 6,
        }
            _p.Repel.steps = 0
        end
        Enabled = false
    end
}

local section = Tab:section{
    Name = "Pokemon" -- default
  }

section:Button {
    Name = "Open Party List üê∂",
    Description = nil,
    Callback = function()
        syn.secure_call(_p.Menu.party.open, localPlayer.PlayerScripts.ChatScript, _p.Menu.party)
    end
}

section:Button {
    Name = "Open PC üñ•Ô∏è",
    Description = nil,
    Callback = function()
        syn.secure_call(_p.Menu.pc.bootUp, localPlayer.PlayerScripts.ChatScript, _p.Menu.pc)
        _p.Menu:enable()
        _p.MasterControl.WalkEnabled = true
    end
}

local section = Tab:section{
    Name = "Skip" -- default
  }

  section:Button {
    Name = "Beat All Gyms ü•á",
    Description = nil,
    Callback = function()
        GUI:Notification
        {
            Title = "Notification",
            Text = "Gyms beaten.",
            Duration = 6,
        }
        for i = 1, 8 do
            beatgym(i)
        end
    end
}

section:Button {
    Name = "Fast Text [ON] ‚è≠Ô∏è",
    Description = nil,
    Callback = function()
        _p.Menu.options.FastText = true
    end
}

section:Button {
    Name = "Skip Chat (Slightly Bugged) ‚è≠Ô∏è",
    Description = nil,
    Callback = function()
        local SkipChat = true
        local OldWait
        OldWait =
            hookfunction(
            _p.NPCChat.AdvanceSignal:wait(),
            function(...)
                if SkipChat then
                    return
                end
                OldWait(...)
            end
        )
        local Old
        Old = hookfunction(
            _p.NPCChat:say(),
            function(...)
                local Args = {...}
                if SkipChat then
                    for i = 3, #Args do
                        if typeof(Args[i]) == "string" then
                            Args[i] = "."
                        end
                    end
                end
                return Old(unpack(Args))
        end)
    end
}
local section = Tab:section{
    Name = "Hoverboard" -- default
  }
section:dropdown(
    {
        Name = "Set Hoverboard üõπ",
        StartingText = "Hoverboard..",
        Items = {
            {"Red", "Basic Red"},
            {"Yellow", "Basic Yellow"},
            {"Pink", "Basic Pink"},
            {"Green", "Basic Green"},
            {"White", "Basic White"},
            {"Gray", "Basic Grey"},
            {"Black", "Basic Black"},
            {"Blue", "Basic Blue"}
        },
        Description = "Sets your hoverboard to a specific color!",
        Callback = function(selectedOption)
            _p.Network:get("PDS", "setHoverboard", selectedOption)
        end
    }
)

section:dropdown(
    {
        Name = "Set Paid Bord üõπ",
        StartingText = "Hoverboard..",
        Items = {
            {"Banana", "Banana"},
            {"Rotom", "Rotom"}
        },
        Description = "Sets your hoverboard to a specific color!",
        Callback = function(selectedOption)
            _p.Network:get("PDS", "setHoverboard", selectedOption)
        end
    }
)
 --

--[[
    STORY SKIPS
]] local Tab =
    GUI:Tab {
    Name = "Story",
    Icon = "rbxassetid://12315998380"
}

local section = Tab:section{
    Name = "Mitis Town" -- default
  }

  section:Button {
    Name = "Skip Meeting Jake",
    Description = nil,
    Callback = function()
        print(_p.PlayerData:completeEvent("MeetJake"))
    end
}
section:Button {
    Name = "Skip Meeting Parents",
    Description = nil,
    Callback = function()
        print(_p.PlayerData:completeEvent("MeetParents"))
    end
}
section:Button {
    Name = "Skip Jake Battle",
    Description = nil,
    Callback = function()
        print(_p.PlayerData:completeEvent("JakeBattle1"))
    end
}
section:Button {
    Name = "Skip Parents Kidnapped",
    Description = nil,
    Callback = function()
        print(_p.PlayerData:completeEvent("ParentsKidnappedScene"))
    end
}

local section = Tab:section{
    Name = "Chesma Town City" -- default
  }

section:Button {
    Name = "Skip Thief Convo",
    Description = nil,
    Callback = function()
        print(_p.PlayerData:completeEvent("BronzeBrickStolen"))
    end
}
section:Button {
    Name = "Track The Thief",
    Description = nil,
    Callback = function()
        print(_p.PlayerData:completeEvent("JakeTracksLinda"))
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-262.576, 65.0785, -862.594)
    end
}

local section = Tab:section{
    Name = "Silvent City" -- default
  }

section:Button {
    Name = "Introduced To First Gym",
    Description = nil,
    Callback = function()
        print(_p.PlayerData:completeEvent("IntroducedToGym1"))
    end
}

local section = Tab:section{
    Name = "Brimber City" -- default
  }

section:Button {
    Name = "Skip Jake Battle 2",
    Description = nil,
    Callback = function()
        print(_p.PlayerData:completeEvent("JakeBattle2")) -- Work on
    end
}
section:Button {
    Name = "Skip Brimber Talk",
    Description = nil,
    Callback = function()
        print(_p.PlayerData:completeEvent("TalkToJakeAndSebastian"))
    end
}
section:Button {
    Name = "Skip Groundon Scene",
    Description = nil,
    Callback = function()
        print(_p.PlayerData:completeEvent("GroudonScene"))
    end
}
section:Button {
    Name = "Skip Following Jake",
    Description = nil,
    Callback = function()
        _p.PlayerData:completeEvent("JakeStartFollow")
        _p.PlayerData:completeEvent("JakeEndFollow")
    end
}

local section = Tab:section{
    Name = "Rosecove City" -- default
  }

section:Button {
    Name = "Skip Rosecove Welcome",
    Description = nil,
    Callback = function()
        _p.PlayerData:completeEvent("RosecoveWelcome")
    end
}
section:Button {
    Name = "Skip Lighthouse Scene",
    Description = nil,
    Callback = function()
        _p.PlayerData:completeEvent("LighthouseScene")
    end
}
section:Button {
    Name = "Skip Cypress After Gym 3",
    Description = nil,
    Callback = function()
        _p.PlayerData:completeEvent("ProfAfterGym3")
    end
}
section:Button {
    Name = "Skip Jake/Tess Goodbyes",
    Description = nil,
    Callback = function()
        _p.PlayerData:completeEvent("JakeAndTessDepart")
    end
}
local section = Tab:section{
    Name = "Anthian City" -- default
  }
section:Button {
    Name = "Gym 4 Tools Giver",
    Description = nil,
    Callback = function()
        _p.PlayerData:completeEvent("G4FoundTape")
        _p.PlayerData:completeEvent("G4GaveTape")
        _p.PlayerData:completeEvent("G4FoundWrench")
        _p.PlayerData:completeEvent("G4GaveWrench")
        _p.PlayerData:completeEvent("G4FoundHammer")
        _p.PlayerData:completeEvent("G4GaveHammer")
    end
}

--[[
    BREEDING
]]
local Tab =
    GUI:Tab {
    Name = "Breeding",
    Icon = "rbxassetid://12316099051"
}

Tab:Button {
    Name = "Open PC üñ•Ô∏è",
    Description = nil,
    Callback = function()
        syn.secure_call(_p.Menu.pc.bootUp, localPlayer.PlayerScripts.ChatScript, _p.Menu.pc)
    end
}

local section = Tab:section{
    Name = "Daycare Man" -- default
  }

section:Button {
    Name = "Bring Daycare Man üë¥",
    Description = nil,
    Callback = function()
        local lp = game:service "Players".LocalPlayer
        game:GetService("Workspace").chunk9["DayCareMan"]:MoveTo(lp.Character.LeftHand.Position)
        local Object = game.ReplicatedStorage.DayCare:WaitForChild("DayCareLady")
        local CloneObject = Object:Clone()
        CloneObject.Parent = game.Workspace.chunk9
        game:GetService("Workspace").chunk9["DayCareLady"]:MoveTo(lp.Character.LeftHand.Position)
    end
}

section:Button {
    Name = "take egg ü•ö",
    Description = nil,
    Callback = function()
        GUI:Notification
        {
            Title = "Notification",
            Text = "Daycare egg taken.",
            Duration = 6,
        }
    _p.PlayerData:takeEgg()
    
    _p.Menu:enable()
    _p.MasterControl.WalkEnabled = true
    end
}

local section = Tab:section{
    Name = "Daycare Lady" -- default
  }
  
  section:dropdown(
    {
        Name = "Leave Pokemon at Daycare üëµ",
        StartingText = "Party Slot",
        Items = {
            {"Slot 1", 1},
            {"Slot 2", 2},
            {"Slot 3", 3},
            {"Slot 4", 4},
            {"Slot 5", 5},
            {"Slot 6", 6}
        },
        Description = "This leaves your selected pokemon in the daycare",
        Callback = function(v)
            GUI:Notification
        {
            Title = "Notification",
            Text = "Selected Pokemon was left at the daycare.",
            Duration = 6,
        }

        _p.Network:get("PDS", "leaveDCPokemon", v)
        end
    }
)

section:Button {
    Name = "Take Daycare Pokemon üë∂",
    Description = nil,
    Callback = function()
        _p.Network:get("PDS", "takeDCPokemon", 1)
        wait(1)
        _p.Network:get("PDS", "takeDCPokemon", 1)
    end
}

local section = Tab:section{
    Name = "Hatching" -- default
  }

section:Button {
    Name = "Hoverboard Spin ['M' - Toggle] ü•ö",
    Description = nil,
    Callback = function()
        local uis = game:GetService("UserInputService")
        local vim = game:GetService("VirtualInputManager")
        local bind = Enum.KeyCode.M
        uis.InputBegan:connect(
            function(key)
                if key.KeyCode == bind then
                    vim:SendKeyEvent(true, "W", false, nil)
                    vim:SendKeyEvent(true, "A", false, nil)
                end
            end
        )
    end
}

--[[
    MISC
]]
local Tab =
    GUI:Tab {
    Name = "Misc",
    Icon = "rbxassetid://12316043440"
}

local section = Tab:section{
    Name = "FPS" -- default
  }

  section:Button {
    Name = "Material Remover üôÖ‚Äç‚ôÇÔ∏èüèóÔ∏è",
    Description = nil,
    Callback = function()
        _G.Settings = {
            Players = {
                ["Ignore Me"] = true, -- Ignore your Character
                ["Ignore Others"] = true -- Ignore other Characters
            },
            Meshes = {
                Destroy = false, -- Destroy Meshes
                LowDetail = true -- Low detail meshes (NOT SURE IT DOES ANYTHING)
            },
            Images = {
                Invisible = true, -- Invisible Images
                LowDetail = false, -- Low detail images (NOT SURE IT DOES ANYTHING)
                Destroy = false -- Destroy Images
            },
            Other = {
                ["No Particles"] = true, -- Disables all ParticleEmitter, Trail, Smoke, Fire and Sparkles
                ["No Camera Effects"] = true, -- Disables all PostEffect's (Camera/Lighting Effects)
                ["No Explosions"] = true, -- Makes Explosion's invisible
                ["No Clothes"] = true, -- Removes Clothing from the game
                ["Low Water Graphics"] = true, -- Removes Water Quality
                ["No Shadows"] = true, -- Remove Shadows
                ["Low Rendering"] = true, -- Lower Rendering
                ["Low Quality Parts"] = true -- Lower quality parts
            }
        }
        loadstring(game:HttpGet("https://raw.githubusercontent.com/CasperFlyModz/discord.gg-rips/main/FPSBooster.lua"))(

        )
    end
}

local section = Tab:section{
    Name = "Chat" -- default
  }

  section:Textbox {
    Name = "Chat Logger üí¨ (insert discord webhook)",
    Callback = function(value)
        local marketplaceService = game:GetService("MarketplaceService")

        local isSuccessful, info = pcall(marketplaceService.GetProductInfo, marketplaceService, Game.PlaceId)
        if isSuccessful then
            local wh = value
            local embed1 = {
                ["title"] = "Beginning of Message logs on " ..
                    info.Name .. " at " .. tostring(os.date("%m/%d/%y at time %X"))
            }
            local a =
                syn.request(
                {
                    Url = wh,
                    Headers = {["Content-Type"] = "application/json"},
                    Body = game:GetService("HttpService"):JSONEncode({["embeds"] = {embed1}, ["content"] = ""}),
                    Method = "POST"
                }
            )
            function logMsg(Webhook, Player, Message)
                local embed = {
                    ["description"] = Player .. ": " .. Message .. "  " .. tostring(os.date("| time %X"))
                }
                local a =
                    syn.request(
                    {
                        Url = Webhook,
                        Headers = {["Content-Type"] = "application/json"},
                        Body = game:GetService("HttpService"):JSONEncode({["embeds"] = {embed}, ["content"] = ""}),
                        Method = "POST"
                    }
                )
            end
            for i, v in pairs(game.Players:GetPlayers()) do
                v.Chatted:Connect(
                    function(msg)
                        logMsg(wh, v.Name, msg)
                    end
                )
            end

            game.Players.PlayerAdded:Connect(
                function(plr)
                    plr.Chatted:Connect(
                        function(msg)
                            logMsg(wh, plr.Name, msg)
                        end
                    )
                end
            )
        end
    end
}

section:Button {
    Name = "Chat Translator üí¨üåê",
    Description = nil,
    Callback = function()
        loadstring(game:HttpGetAsync("https://i.qts.life/r/ChatInlineTranslator.lua", true))()
    end
}

local section = Tab:section{
    Name = "Movement" -- default
  }

  section:Button {
    Name = "Ctrl + TP üåÄ",
    Description = nil,
    Callback = function()
        local Plr = game:GetService("Players").LocalPlayer
        local Mouse = Plr:GetMouse()
        Mouse.Button1Down:connect(
            function()
                if not game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.LeftControl) then
                    return
                end
                if not Mouse.Target then
                    return
                end
                Plr.Character:MoveTo(Mouse.Hit.p)
            end
        )
    end
}

section:Button {
    Name = "Noclip + Fly üöÄ [Toggle - E]",
    Description = nil,
    Callback = function()
-- Fly Script
--[[
Toggle : LeftAlt (Editable in script)
Fast Fly : LeftControl (Editable in script)
Movement : W A S D (Editable in script)
Up / Down : E / Q (Editable in script)
--]]


local Settings = {
	
	Speed = 5,
	SprintSpeed = 30,
	ToggleKey = Enum.KeyCode.H,
	SprintKey = Enum.KeyCode.LeftControl,
	
	ForwardKey = Enum.KeyCode.W,
	LeftKey = Enum.KeyCode.A,
	BackwardKey = Enum.KeyCode.S,
	RightKey = Enum.KeyCode.D,
	--UpKey = Enum.KeyCode.E,
	--DownKey = Enum.KeyCode.Q,
	
}

local Screen = Instance.new("ScreenGui",game.CoreGui)
local Distance = Instance.new("TextLabel",Screen)
Distance.BackgroundTransparency = 1
Distance.Size = UDim2.new(0,10,0,10)
Distance.ZIndex = 2
Distance.Text = "0"
Distance.TextStrokeTransparency = .5
Distance.TextSize = 20
Distance.TextStrokeColor3 = Color3.fromRGB(33, 33, 33)
Distance.Font = Enum.Font.Gotham
Distance.TextColor3 = Color3.new(1,1,1)
Distance.TextXAlignment = Enum.TextXAlignment.Left
Distance.TextYAlignment = Enum.TextYAlignment.Top


local Mouse = game.Players.LocalPlayer:GetMouse()
local Direction = Vector3.new(0,0,0)
local InterpolatedDir = Direction
local Tilt = 0
local InterpolatedTilt = Tilt
local RunService = game:GetService("RunService")
local Toggled = false
local Sprinting = false
local CameraPos = game.Workspace.CurrentCamera.CFrame.Position

pcall(function()
	game.Players.LocalPlayer.DevCameraOcclusionMode = Enum.DevCameraOcclusionMode.Invisicam	
end)

function Lerp(a, b, t)
    return a + (b - a) * t
end

local LastPos = nil

function KeyHandler(actionName, userInputState)
	if true and game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
		if actionName == "Toggle" and userInputState == Enum.UserInputState.Begin then
			Toggled = not Toggled
			if Toggled then
				LastPos = game.Players.LocalPlayer.Character.HumanoidRootPart.Position
				--game.Players.LocalPlayer.Character.HumanoidRootPart.Anchored = true
				game.Players.LocalPlayer.Character.Humanoid.PlatformStand = true 
			else
				LastPos = nil
				game.Players.LocalPlayer.Character.Humanoid.PlatformStand = false
				--game.Players.LocalPlayer.Character.HumanoidRootPart.Anchored = false
			end
		elseif actionName == "Forward" then
			Tilt = userInputState == Enum.UserInputState.Begin and -20 or 0
			Direction = Vector3.new(Direction.x,Direction.y,userInputState == Enum.UserInputState.Begin and -1 or 0)
		elseif actionName == "Left" then
			Direction = Vector3.new(userInputState == Enum.UserInputState.Begin and -1 or 0,Direction.y,Direction.z)
		elseif actionName == "Backward" then
			Tilt = userInputState == Enum.UserInputState.Begin and 20 or 0
			Direction = Vector3.new(Direction.x,Direction.y,userInputState == Enum.UserInputState.Begin and 1 or 0)
		elseif actionName == "Right" then
			Direction = Vector3.new(userInputState == Enum.UserInputState.Begin and 1 or 0,Direction.y,Direction.z)
		elseif actionName == "Up" then
			Direction = Vector3.new(Direction.x,userInputState == Enum.UserInputState.Begin and 1 or 0,Direction.z)
		elseif actionName == "Down" then
			Direction = Vector3.new(Direction.x,userInputState == Enum.UserInputState.Begin and -1 or 0,Direction.z)
		elseif actionName == "Sprint" then
			Sprinting = userInputState == Enum.UserInputState.Begin
		end
	end
end



game:GetService("UserInputService").InputBegan:connect(function(inputObject, gameProcessedEvent)
	
	if inputObject.KeyCode == Settings.ToggleKey then
		KeyHandler("Toggle", Enum.UserInputState.Begin, inputObject)
	elseif inputObject.KeyCode == Settings.ForwardKey then
		KeyHandler("Forward", Enum.UserInputState.Begin, inputObject)
	elseif inputObject.KeyCode == Settings.LeftKey then
		KeyHandler("Left", Enum.UserInputState.Begin, inputObject)
	elseif inputObject.KeyCode == Settings.BackwardKey then
		KeyHandler("Backward", Enum.UserInputState.Begin, inputObject)
	elseif inputObject.KeyCode == Settings.RightKey then
		KeyHandler("Right", Enum.UserInputState.Begin, inputObject)
	elseif inputObject.KeyCode == Settings.UpKey then	
		KeyHandler("Up", Enum.UserInputState.Begin, inputObject)
	elseif inputObject.KeyCode == Settings.DownKey then
		KeyHandler("Down", Enum.UserInputState.Begin, inputObject)
	elseif inputObject.KeyCode == Settings.SprintKey then
		KeyHandler("Sprint", Enum.UserInputState.Begin, inputObject)
	end
	
	
end)


game:GetService("UserInputService").InputEnded:connect(function(inputObject, gameProcessedEvent)
	
	if inputObject.KeyCode == Settings.ToggleKey then
		KeyHandler("Toggle", Enum.UserInputState.End, inputObject)
	elseif inputObject.KeyCode == Settings.ForwardKey then
		KeyHandler("Forward", Enum.UserInputState.End, inputObject)
	elseif inputObject.KeyCode == Settings.LeftKey then
		KeyHandler("Left", Enum.UserInputState.End, inputObject)
	elseif inputObject.KeyCode == Settings.BackwardKey then
		KeyHandler("Backward", Enum.UserInputState.End, inputObject)
	elseif inputObject.KeyCode == Settings.RightKey then
		KeyHandler("Right", Enum.UserInputState.End, inputObject)
	elseif inputObject.KeyCode == Settings.UpKey then	
		KeyHandler("Up", Enum.UserInputState.End, inputObject)
	elseif inputObject.KeyCode == Settings.DownKey then
		KeyHandler("Down", Enum.UserInputState.End, inputObject)
	elseif inputObject.KeyCode == Settings.SprintKey then
		KeyHandler("Sprint", Enum.UserInputState.End, inputObject)
	end
	
	
end)


RunService.RenderStepped:Connect(function()
	if Toggled and game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")  then
		for i,v in pairs(game.Players.LocalPlayer.Character:GetDescendants()) do
			if v:IsA("BasePart") then
				v.Velocity = Vector3.new(0,0,0)
			end
		end
		local RootPart = game.Players.LocalPlayer.Character.HumanoidRootPart
		if LastPos then
			Distance.Text = math.floor((LastPos-RootPart.Position).Magnitude+.5)
			if (LastPos-RootPart.Position).Magnitude >= 350 then
				Distance.TextColor3 = Color3.new(1,0,0)
			else
				Distance.TextColor3 = Color3.new(1,1,1)	
			end
		else
			Distance.TextColor3 = Color3.new(1,1,1)
			Distance.Text = 0
		end
		InterpolatedDir = InterpolatedDir:Lerp((Direction * (Sprinting and Settings.SprintSpeed or Settings.Speed)),.2)
		InterpolatedTilt = Lerp(InterpolatedTilt ,Tilt* (Sprinting and 2 or 1),Tilt == 0 and .2 or .1)
		RootPart.CFrame = RootPart.CFrame:Lerp(CFrame.new(RootPart.Position,RootPart.Position + Mouse.UnitRay.Direction) * CFrame.Angles(0,math.rad(00),0) * CFrame.new(InterpolatedDir)  * CFrame.Angles(math.rad(InterpolatedTilt),0,0),.2)
	else
		Distance.TextColor3 = Color3.new(1,1,1)
		Distance.Text = 0
	end	
end)

    end
}


local section = Tab:section{
    Name = "Servers" -- default
  }
  section:Button {
    Name = "Rejoin üîóüîÑ",
    Description = nil,
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/Exunys/Rejoin-Game/main/Rejoin%20Game.lua"))()
    end
}
section:Button {
    Name = "Server Browser üñ•Ô∏èüóÉÔ∏è",
    Description = nil,
    Callback = function()
        loadstring(game:HttpGet("https://www.scriptblox.com/raw/Server-Browser_80", true))()
    end
}
--[[
    SHOPS
]]
local Tab =
    GUI:Tab {
    Name = "Shops",
    Icon = "rbxassetid://12315878682"
}

local section = Tab:section{
    Name = "Stores" -- default
  }

  section:Button {
    Name = "Pokemart üè™",
    Description = nil,
    Callback = function()
        local _p = nil
        for _, v in pairs(getgc(true)) do
            if typeof(v) == "table" then
                if rawget(v, "PlayerData") then
                    _p = v
                    break
                end
            end
        end
        _p.Menu.shop:open()
        _p.Menu:enable()
        _p.MasterControl.WalkEnabled = true
    end
}
section:Button {
    Name = "BP Shop üè¨",
    Description = nil,
    Callback = function()
        local _p = nil
        for _, v in pairs(getgc(true)) do
            if typeof(v) == "table" then
                if rawget(v, "PlayerData") then
                    _p = v
                    break
                end
            end
        end
        _p.Menu.battleShop:open()
        _p.Menu:enable()
        _p.MasterControl.WalkEnabled = true
    end
}
section:Button {
    Name = "Stoneshop üíé",
    Description = nil,
    Callback = function()
        local _p = nil
        for _, v in pairs(getgc(true)) do
            if typeof(v) == "table" then
                if rawget(v, "PlayerData") then
                    _p = v
                    break
                end
            end
        end
        _p.Menu.shop:open("stnshp")
        _p.Menu:enable()
        _p.MasterControl.WalkEnabled = true
    end
}

section:Button {
    Name = "Arcade Shop üé´",
    Description = nil,
    Callback = function()
        local _p = nil
        for _, v in pairs(getgc(true)) do
            if typeof(v) == "table" then
                if rawget(v, "PlayerData") then
                    _p = v
                    break
                end
            end
        end
        _p.Menu.ArcadeShop:open()
        _p.Menu:enable()
            _p.MasterControl.WalkEnabled = true
    end
}

section:Button {
    Name = "Buy Sushi (gives berries + prism scales) üç£",
    Description = nil,
    Callback = function()
        local _p = nil
        for _, v in pairs(getgc(true)) do
            if typeof(v) == "table" then
                if rawget(v, "PlayerData") then
                    _p = v
                    break
                end
            end
        end
        _p.Network:get("PDS", "buySushi") -- = PlayerData:buySushi() ?
    end
}
--[[
    ONE TIME USE
]]
local Tab =
    GUI:Tab {
    Name = "One-Time Use",
    Icon = "rbxassetid://5009915795"
}
Tab:Button {
    Name = "Absol + Eevee ü¶ì",
    Description = nil,
    Callback = function()
        print(_p.PlayerData:completeEvent("GetAbsol"))
        print(_p.PlayerData:completeEvent("Eevee2Awarded"))
    end
}
Tab:Button {
    Name = "Enable RTD + Running üèÉ",
    Description = nil,
    Callback = function()
        _p.Menu.rtd:enable()
        _p.RunningShoes:enable()
    end
}

local section = Tab:section{
    Name = "Items" -- default
  }

  section:dropdown(
    {
        Name = "Find Hidden Pokeballs üïµ (1x use)",
        StartingText = "Chunk",
        Items = {
            {"Chunk 1 (Mitis Town + Route 1)", 1},
            {"Chunk 2 (Cheshma Town + Gale Forest + Route 2)", 2},
            {"Chunk 3 (Route 3 + Silvent City + Route 4)", 3},
            {"Chunk 4 (Route 5 + Old Graveyard", 4},
            {"Chunk 5 (Brimber City", 5},
            {"Chunk 6 (Route 6", 6},
            {"Chunk 7 (Mt. Igneus)", 7},
            {"Chunk 8 (Route 7)", 8},
            {"Chunk 9 (Lagoona Lake)", 9},
            {"Chunk 10 (Route 8)", 10},
            {"Chunk 11 (Rosecove City + Rosecove Beach)", 11},
            {"Chunk 12 (Route 9)", 12},
            {"Chunk 13 (Fortulose Manor)", 13},
            {"Chunk 14 (Grove of Dreams)", 14},
            {"Chunk 15 (Route 10)", 15},
            {"Chunk 16 (Cragonos Mines)", 16},
            {"Chunk 17 (Cragonos Cliffs again)", 17},
            {"Chunk 18 (Cragonos Peak)", 18},
            {"Chunk 19 (Anthian City - Housing District)", 19},
            {"Chunk 20 (Anthian City - Shopping District)", 20},
            {"Chunk 21 (Anthian City - Battle District)", 21},
            {"Chunk 22 (Anthian City - Park District)", 22},
            {"Chunk 23 (Anthian Sewer)", 23},
            {"Chunk 24 (Route 11)", 24},
            {"Chunk 25 (Aredia City)", 25},
            {"Chunk 26 (Glistening Grotto)", 26},
            {"Chunk 27 (Old Aredia)", 27},
            {"Chunk 28 (Desert Castle Ruins 1)", 28},
            {"Chunk 29 (Desert Castle Ruins 2)", 29},
            {"Chunk 30 (Desert Castle Ruins 3)", 30},
            {"Chunk 31 (Desert Castle Ruins 4)", 31},
            {"Chunk 32 (Desert Castle Ruins 5)", 32},
            {"Chunk 33 (Desert Castle Ruins 6)", 33},
            {"Chunk 34 (Desert Castle Ruins 7 + Victini)", 34},
            {"Chunk 35 (Desert Catacombs)", 35},
            {"Chunk 36 (Route 12)", 36},
            {"Chunk 37 (Nature's Den)", 37},
            {"Chunk 38 (Route 13)", 38},
            {"Chunk 39 (Fluoruma City)", 39},
            {"Chunk 40 (Igneus Depths)", 40},
            {"Chunk 41 (Chamber of the Jewel)", 41},
            {"Chunk 42 (Route 14  1)", 42},
            {"Chunk 43 (Route 14  2", 43},
            {"Chunk 44 (Cragonos Sanctuary)", 44},
            {"Chunk 45 (Route 15)", 45},
            {"Chunk 46 (Frostveil City)", 46},
            {"Chunk 47 (Route 16)", 47},
            {"Chunk 48 (Freezing Fissure)", 48},
            {"Chunk 51 (Cosmeos Valley)", 51},
            {"Chunk 52 (Port Decca)", 52},
            {"Chunk 53 (Decca Beach)", 53},

            -- needs finishing [ halfway done !!!]



        },
        Description = "This teleports hidden pokeballs to you (must be in right chunk)",
        Callback = function(v)

            

            if(v == 1) then 
                -- Chunk 1
                local lp = game:service "Players".LocalPlayer       
                local plr1 = game.Players.LocalPlayer.Character
                
                game:GetService("Workspace").chunk1["#Item"]:MoveTo(lp.Character.LeftHand.Position)
                wait(2)
                plr1.HumanoidRootPart.CFrame = plr1.HumanoidRootPart.CFrame * CFrame.new(0,1.8,0)
                wait(5)
                game:GetService("Workspace").chunk1["#Item"]:Destroy() 
                wait(.5)
                game:GetService("Workspace").chunk1["#Item"]:MoveTo(lp.Character.LeftHand.Position)
                wait(2)
                plr1.HumanoidRootPart.CFrame = plr1.HumanoidRootPart.CFrame * CFrame.new(0,1.8,0)
                wait(5)
                game:GetService("Workspace").chunk1["#Item"]:Destroy() 
                wait(.5)
                game:GetService("Workspace").chunk1["#Item"]:MoveTo(lp.Character.LeftHand.Position)
                wait(2)
                plr1.HumanoidRootPart.CFrame = plr1.HumanoidRootPart.CFrame * CFrame.new(0,1.8,0)
                wait(5)
                game:GetService("Workspace").chunk1["#Item"]:Destroy() 
                wait(.5)
                game:GetService("Workspace").chunk1["#Item"]:MoveTo(lp.Character.LeftHand.Position)
                wait(2)
                plr1.HumanoidRootPart.CFrame = plr1.HumanoidRootPart.CFrame * CFrame.new(0,1.8,0)
                wait(5)
                game:GetService("Workspace").chunk1["#Item"]:Destroy() 
                wait(.5)
                game:GetService("Workspace").chunk1["#Item"]:MoveTo(lp.Character.LeftHand.Position)
                wait(2)
                plr1.HumanoidRootPart.CFrame = plr1.HumanoidRootPart.CFrame * CFrame.new(0,1.8,0)
                wait(5)
                game:GetService("Workspace").chunk1["#Item"]:Destroy() 
                wait(.5)
                game:GetService("Workspace").chunk1["#Item"]:MoveTo(lp.Character.LeftHand.Position)
                wait(2)
                plr1.HumanoidRootPart.CFrame = plr1.HumanoidRootPart.CFrame * CFrame.new(0,1.8,0)
                wait(5)
                game:GetService("Workspace").chunk1["#Item"]:Destroy() 
                wait(.5)
        
            
        end


            if(v == 2) then 
                -- Chunk 2
                local lp = game:service "Players".LocalPlayer       
                local plr1 = game.Players.LocalPlayer.Character
                
                game:GetService("Workspace").chunk2["#Item"]:MoveTo(lp.Character.LeftHand.Position)
                wait(2)
                plr1.HumanoidRootPart.CFrame = plr1.HumanoidRootPart.CFrame * CFrame.new(0,1.8,0)
                wait(5)
                game:GetService("Workspace").chunk2["#Item"]:Destroy() 
                wait(.5)
                game:GetService("Workspace").chunk2["#Item"]:MoveTo(lp.Character.LeftHand.Position)
                wait(2)
                plr1.HumanoidRootPart.CFrame = plr1.HumanoidRootPart.CFrame * CFrame.new(0,1.8,0)
                wait(5)
                game:GetService("Workspace").chunk2["#Item"]:Destroy() 
                wait(.5)
                game:GetService("Workspace").chunk2["#Item"]:MoveTo(lp.Character.LeftHand.Position)
                wait(2)
                plr1.HumanoidRootPart.CFrame = plr1.HumanoidRootPart.CFrame * CFrame.new(0,1.8,0)
                wait(5)
                game:GetService("Workspace").chunk2["#Item"]:Destroy() 
                wait(.5)
                game:GetService("Workspace").chunk2["#Item"]:MoveTo(lp.Character.LeftHand.Position)
                wait(2)
                plr1.HumanoidRootPart.CFrame = plr1.HumanoidRootPart.CFrame * CFrame.new(0,1.8,0)
                wait(5)
                game:GetService("Workspace").chunk2["#Item"]:Destroy() 
                wait(.5)
                game:GetService("Workspace").chunk2["#Item"]:MoveTo(lp.Character.LeftHand.Position)
                wait(2)
                plr1.HumanoidRootPart.CFrame = plr1.HumanoidRootPart.CFrame * CFrame.new(0,1.8,0)
                wait(5)
                game:GetService("Workspace").chunk2["#Item"]:Destroy() 
                wait(.5)
                game:GetService("Workspace").chunk2["#Item"]:MoveTo(lp.Character.LeftHand.Position)
                wait(2)
                plr1.HumanoidRootPart.CFrame = plr1.HumanoidRootPart.CFrame * CFrame.new(0,1.8,0)
                wait(5)
                game:GetService("Workspace").chunk2["#Item"]:Destroy() 
                wait(.5)
                
        
            
        end


            if(v == 3) then 
                -- Chunk 3
                local lp = game:service "Players".LocalPlayer       
                local plr1 = game.Players.LocalPlayer.Character
                
                game:GetService("Workspace").chunk3["#Item"]:MoveTo(lp.Character.LeftHand.Position)
                wait(2)
                plr1.HumanoidRootPart.CFrame = plr1.HumanoidRootPart.CFrame * CFrame.new(0,1.8,0)
                wait(5)
                game:GetService("Workspace").chunk3["#Item"]:Destroy() 
                wait(.5)
                game:GetService("Workspace").chunk3["#Item"]:MoveTo(lp.Character.LeftHand.Position)
                wait(2)
                plr1.HumanoidRootPart.CFrame = plr1.HumanoidRootPart.CFrame * CFrame.new(0,1.8,0)
                wait(5)
                game:GetService("Workspace").chunk3["#Item"]:Destroy() 
                wait(.5)
                game:GetService("Workspace").chunk3["#Item"]:MoveTo(lp.Character.LeftHand.Position)
                wait(2)
                plr1.HumanoidRootPart.CFrame = plr1.HumanoidRootPart.CFrame * CFrame.new(0,1.8,0)
                wait(5)
                game:GetService("Workspace").chunk3["#Item"]:Destroy() 
                wait(.5)
                game:GetService("Workspace").chunk3["#Item"]:MoveTo(lp.Character.LeftHand.Position)
                wait(2)
                plr1.HumanoidRootPart.CFrame = plr1.HumanoidRootPart.CFrame * CFrame.new(0,1.8,0)
                wait(5)
                game:GetService("Workspace").chunk3["#Item"]:Destroy() 
                wait(.5)
                game:GetService("Workspace").chunk3["#Item"]:MoveTo(lp.Character.LeftHand.Position)
                wait(2)
                plr1.HumanoidRootPart.CFrame = plr1.HumanoidRootPart.CFrame * CFrame.new(0,1.8,0)
                wait(5)
                game:GetService("Workspace").chunk3["#Item"]:Destroy() 
                wait(.5)
                game:GetService("Workspace").chunk3["#Item"]:MoveTo(lp.Character.LeftHand.Position)
                wait(2)
                plr1.HumanoidRootPart.CFrame = plr1.HumanoidRootPart.CFrame * CFrame.new(0,1.8,0)
                wait(5)
                game:GetService("Workspace").chunk3["#Item"]:Destroy() 
                wait(.5)
        
                   
        end   


                -- needs finishing


                -- needs finishing


                -- needs finishing


                -- needs finishing


                -- needs finishing


                -- needs finishing













        end
    }
  )

  section:Button {
    Name = "Give Leftovers üçé (1x use)",
    Description = nil,
    Callback = function()
        _p.PlayerData:completeEvent("GivenLeftovers")
    end
}
section:Button {
    Name = "Give Kings Rock üëë (1x use)",
    Description = nil,
    Callback = function()
        _p.PlayerData:completeEvent("KingsRockGiven")
    end
}

section:Button {
    Name = "Gives SawsbuckCoffee ‚òï (1x use)",
    Description = nil,
    Callback = function()
        _p.Network:get("PDS", "isMilD")
        _p.PlayerData:completeEvent("GivenSawsbuckCoffee")
    end
}

Tab:Button {
    Name = "BlackWhite Egg ü•ö (1x use)",
    Description = nil,
    Callback = function()
        print(_p.PlayerData:completeEvent("ReceivedBWEgg"))
    end
}
--[[
    MONEY AND TIX
]]
local Tab =
    GUI:Tab {
    Name = "Currency",
    Icon = "rbxassetid://12315927191"
}

local section = Tab:section{
    Name = "Money" -- default
  }

  section:Button {
    Name = "PokeDollars (Very Risky) (Alot of Money + Tickets) üò±üí∞",
    Description = nil,
    Callback = function()
        
    end
}
section:Button {
    Name = "PokeDollars Less Risky (+$10080) ü§ëüí∞",
    Description = nil,
    Callback = function()
        local beatgym = function(gym)
            local index = {
                181
            }
            local battle =
                _p.Network:get(
                "BattleFunction",
                "new",
                {
                    ["trainerId"] = index[gym] or 1
                }
            )
            _p.Network:post("BattleEvent", battle.battleId, "join", 1, ";)")
            wait(.1)
            _p.Network:post("BattleEvent", battle.battleId, "forfeit", "p2")
            _p.Network:post("BattleEvent", battle.battleId, "destroy")
        end
        
        for i = 1, 4 do
            beatgym(i)

        end

    end
}
section:Button {
    Name = "Tix (+25)üí≤",
    Description = nil,
    Callback = function()
        local _p = nil
        for _, v in pairs(getgc(true)) do
            if typeof(v) == "table" then
                if rawget(v, "Events") then
                    _p = v
                    break
                end
            end
        end
        _p.Network:get("PDS", "AlolanReward", 25)
    end
}

--[[
    Item Spawner
]]
local Tab =
    GUI:Tab {
    Name = "Item Generator",
    Icon = "rbxassetid://12316080003"
}

local section = Tab:section{
    Name = "Name / Quantity" -- default
  }

  section:Textbox {
    Name = "Insert Item Name üó≥Ô∏è",
    Callback = function(str)
        item1 = tostring(str)
    end
}
section:Textbox {
    Name = "Insert Quantity üó≥Ô∏è",
    Callback = function(str)
        qy = tonumber(str)
    end
}

local section = Tab:section{
    Name = "Spawner" -- default
  }

  section:Button {
    Name = "Spawn Item ‚ú®",
    Description = nil,
    Callback = function()
        spawnitem(item1, qy)
    end
}

section:dropdown(
    {
        Name = "Item List üìÉ",
        StartingText = "these are common items spawned",
        Items = {
            {"masterball", "masterball"},
            {"rarecandy", "rarecandy"},
            {"bottlecap", "bottlecap"},
            {"shinystar", "shinystar"}
        },
        Description = "clicking on an option spawns (+1)",
        Callback = function(v)
            spawnitem(v, 1)
        end
    }
)


local Tab =
    GUI:Tab {
    Name = "Levels + IV + EV",
    Icon = "rbxassetid://12316027901"
}

local section = Tab:section{
    Name = "Levels" -- default
  }

local pee
section:Textbox {
    Name = "Insert Amount of Rare Candies üó≥Ô∏è",
    Callback = function(str)
        pee = str
    end
}

section:dropdown(
    {
        Name = "Pokemon Instant Lvl Changer üìà‚¨ÜÔ∏è",
        StartingText = "Party Slot",
        Items = {
            {"Slot 1", 1},
            {"Slot 2", 2},
            {"Slot 3", 3},
            {"Slot 4", 4},
            {"Slot 5", 5},
            {"Slot 6", 6}
        },
        Description = "This uses the amount of rare candies that you input above",
        Callback = function(v)
            q = pee
            for i = 1, q do
                spawnitem("rarecandy", 1) -- item + quantity
                _p.Network:get("PDS", "useItem", "rarecandy", v)
            end
        end
    }
)

local section = Tab:section{
    Name = "IV Changer" -- default
  }


section:dropdown(
    {
        Name = "Pokemon IV Changer 3Ô∏è‚É£1Ô∏è‚É£",
        StartingText = "Party Slot",
        Items = {
            {"Slot 1", 1},
            {"Slot 2", 2},
            {"Slot 3", 3},
            {"Slot 4", 4},
            {"Slot 5", 5},
            {"Slot 6", 6}
        },
        Description = "This changes your selected pokemon's IV's to 6x31",
        Callback = function(v)
            spawnitem("bottlecap", 6) -- item + quantity

            _p.Network:get("PDS", "trainpokemon", v, "HP")
            _p.Network:get("PDS", "trainpokemon", v, "Speed")
            _p.Network:get("PDS", "trainpokemon", v, "Defense")
            _p.Network:get("PDS", "trainpokemon", v, "Sp Def")
            _p.Network:get("PDS", "trainpokemon", v, "Sp Atk")
            _p.Network:get("PDS", "trainpokemon", v, "Attack")
        end
    }
)

local section = Tab:section{
    Name = "EV Changer" -- default
  }

  section:dropdown(
    {
        Name = "Pokemon Attack EV Changer ‚öîÔ∏è",
        StartingText = "Party Slot",
        Items = {
            {"Slot 1", 1},
            {"Slot 2", 2},
            {"Slot 3", 3},
            {"Slot 4", 4},
            {"Slot 5", 5},
            {"Slot 6", 6}
        },
        Description = "This changes your selected pokemon's EV's to max stat",
        Callback = function(v)
            q = 26
            for i = 1, q do
                spawnitem("protein", 1) -- item + quantity
                _p.Network:get("PDS", "useItem", "protein", v)
            end
        end
    }
)

section:dropdown(
    {
        Name = "Pokemon Defense EV Changer üõ°Ô∏è",
        StartingText = "Party Slot",
        Items = {
            {"Slot 1", 1},
            {"Slot 2", 2},
            {"Slot 3", 3},
            {"Slot 4", 4},
            {"Slot 5", 5},
            {"Slot 6", 6}
        },
        Description = "This changes your selected pokemon's EV's to max stat",
        Callback = function(v)
            q = 26
            for i = 1, q do
                spawnitem("iron", 1) -- item + quantity
                _p.Network:get("PDS", "useItem", "iron", v)
            end
        end
    }
)

section:dropdown(
    {
        Name = "Pokemon Sp Atk EV Changer üèπ",
        StartingText = "Party Slot",
        Items = {
            {"Slot 1", 1},
            {"Slot 2", 2},
            {"Slot 3", 3},
            {"Slot 4", 4},
            {"Slot 5", 5},
            {"Slot 6", 6}
        },
        Description = "This changes your selected pokemon's EV's to max stat",
        Callback = function(v)
            q = 26
            for i = 1, q do
                spawnitem("calcium", 1) -- item + quantity
                _p.Network:get("PDS", "useItem", "calcium", v)
            end
        end
    }
)

section:dropdown(
    {
        Name = "Pokemon Sp Def EV Changer üõ°Ô∏è",
        StartingText = "Party Slot",
        Items = {
            {"Slot 1", 1},
            {"Slot 2", 2},
            {"Slot 3", 3},
            {"Slot 4", 4},
            {"Slot 5", 5},
            {"Slot 6", 6}
        },
        Description = "This changes your selected pokemon's EV's to max stat",
        Callback = function(v)
            q = 26
            for i = 1, q do
                spawnitem("zinc", 1) -- item + quantity
                _p.Network:get("PDS", "useItem", "zinc", v)
            end
        end
    }
)

section:dropdown(
    {
        Name = "Pokemon Speed EV Changer üèÉ",
        StartingText = "Party Slot",
        Items = {
            {"Slot 1", 1},
            {"Slot 2", 2},
            {"Slot 3", 3},
            {"Slot 4", 4},
            {"Slot 5", 5},
            {"Slot 6", 6}
        },
        Description = "This changes your selected pokemon's EV's to max stat",
        Callback = function(v)
            q = 26
            for i = 1, q do
                spawnitem("carbos", 1) -- item + quantity
                _p.Network:get("PDS", "useItem", "carbos", v)
            end
        end
    }
)

section:dropdown(
    {
        Name = "Pokemon HP EV Changer üíñ",
        StartingText = "Party Slot",
        Items = {
            {"Slot 1", 1},
            {"Slot 2", 2},
            {"Slot 3", 3},
            {"Slot 4", 4},
            {"Slot 5", 5},
            {"Slot 6", 6}
        },
        Description = "This changes your selected pokemon's EV's to max stat",
        Callback = function(v)
            q = 26
            for i = 1, q do
                spawnitem("hpup", 1) -- item + quantity
                _p.Network:get("PDS", "useItem", "hpup", v)
            end
        end
    }
)

section:dropdown(
    {
        Name = "Pokemon EV Remover ‚ùå",
        StartingText = "Party Slot",
        Items = {
            {"Slot 1", 1},
            {"Slot 2", 2},
            {"Slot 3", 3},
            {"Slot 4", 4},
            {"Slot 5", 5},
            {"Slot 6", 6}
        },
        Description = "This changes your selected pokemon's EV's to max stat",
        Callback = function(v)
            q = 1
            for i = 1, q do
                spawnitem("defensereset", 1) -- item + quantity
                spawnitem("attackreset", 1) -- item + quantity
                spawnitem("spdefreset", 1) -- item + quantity
                spawnitem("spatkreset", 1) -- item + quantity
                spawnitem("speedreset", 1) -- item + quantity
                spawnitem("hpreset", 1) -- item + quantity
                _p.Network:get("PDS", "useItem", "defensereset", v)
                _p.Network:get("PDS", "useItem", "attackreset", v)
                _p.Network:get("PDS", "useItem", "spdefreset", v)
                _p.Network:get("PDS", "useItem", "spatkreset", v)
                _p.Network:get("PDS", "useItem", "speedreset", v)
                _p.Network:get("PDS", "useItem", "hpreset", v)
            end
        end
    }
)

local section = Tab:section{
    Name = "Nature ( +speed )" -- default
  }

  section:dropdown(
    {
        Name = "Pokemon Jolly Nature Changer (+speed)(-sp atk) üíö",
        StartingText = "Party Slot",
        Items = {
            {"Slot 1", 1},
            {"Slot 2", 2},
            {"Slot 3", 3},
            {"Slot 4", 4},
            {"Slot 5", 5},
            {"Slot 6", 6}
        },
        Description = "This changes your selected pokemon's EV's to max stat",
        Callback = function(v)
            q = 1
            for i = 1, q do
                spawnitem("jollymint", 1) -- item + quantity
                _p.Network:get("PDS", "useItem", "jollymint", v)
            end
        end
    }
)

section:dropdown(
    {
        Name = "Pokemon Timid Nature Changer (+speed)(-atk) üíö",
        StartingText = "Party Slot",
        Items = {
            {"Slot 1", 1},
            {"Slot 2", 2},
            {"Slot 3", 3},
            {"Slot 4", 4},
            {"Slot 5", 5},
            {"Slot 6", 6}
        },
        Description = "This changes your selected pokemon's EV's to max stat",
        Callback = function(v)
            q = 1
            for i = 1, q do
                spawnitem("timidmint", 1) -- item + quantity
                _p.Network:get("PDS", "useItem", "timidmint", v)
            end
        end
    }
)

section:dropdown(
    {
        Name = "Pokemon Naive Nature Changer (+speed)(-sp def) üíö",
        StartingText = "Party Slot",
        Items = {
            {"Slot 1", 1},
            {"Slot 2", 2},
            {"Slot 3", 3},
            {"Slot 4", 4},
            {"Slot 5", 5},
            {"Slot 6", 6}
        },
        Description = "This changes your selected pokemon's EV's to max stat",
        Callback = function(v)
            q = 1
            for i = 1, q do
                spawnitem("naivemint", 1) -- item + quantity
                _p.Network:get("PDS", "useItem", "naivemint", v)
            end
        end
    }
)

section:dropdown(
    {
        Name = "Pokemon Hasty Nature Changer (+speed)(-def) üíö",
        StartingText = "Party Slot",
        Items = {
            {"Slot 1", 1},
            {"Slot 2", 2},
            {"Slot 3", 3},
            {"Slot 4", 4},
            {"Slot 5", 5},
            {"Slot 6", 6}
        },
        Description = "This changes your selected pokemon's EV's to max stat",
        Callback = function(v)
            q = 1
            for i = 1, q do
                spawnitem("hastymint", 1) -- item + quantity
                _p.Network:get("PDS", "useItem", "hastymint", v)
            end
        end
    }
)

local section = Tab:section{
    Name = "Nature ( +def )" -- default
  }

  section:dropdown(
    {
        Name = "Pokemon Implish Nature Changer (+def)(-sp atk) üíô",
        StartingText = "Party Slot",
        Items = {
            {"Slot 1", 1},
            {"Slot 2", 2},
            {"Slot 3", 3},
            {"Slot 4", 4},
            {"Slot 5", 5},
            {"Slot 6", 6}
        },
        Description = "This changes your selected pokemon's EV's to max stat",
        Callback = function(v)
            q = 1
            for i = 1, q do
                spawnitem("implishmint", 1) -- item + quantity
                _p.Network:get("PDS", "useItem", "implishmint", v)
            end
        end
    }
)

section:dropdown(
    {
        Name = "Pokemon Bold Nature Changer (+def)(-atk) üíô",
        StartingText = "Party Slot",
        Items = {
            {"Slot 1", 1},
            {"Slot 2", 2},
            {"Slot 3", 3},
            {"Slot 4", 4},
            {"Slot 5", 5},
            {"Slot 6", 6}
        },
        Description = "This changes your selected pokemon's EV's to max stat",
        Callback = function(v)
            q = 1
            for i = 1, q do
                spawnitem("boldmint", 1) -- item + quantity
                _p.Network:get("PDS", "useItem", "boldmint", v)
            end
        end
    }
)

section:dropdown(
    {
        Name = "Pokemon Lax Nature Changer (+def)(-sp def) üíô",
        StartingText = "Party Slot",
        Items = {
            {"Slot 1", 1},
            {"Slot 2", 2},
            {"Slot 3", 3},
            {"Slot 4", 4},
            {"Slot 5", 5},
            {"Slot 6", 6}
        },
        Description = "This changes your selected pokemon's EV's to max stat",
        Callback = function(v)
            q = 1
            for i = 1, q do
                spawnitem("laxmint", 1) -- item + quantity
                _p.Network:get("PDS", "useItem", "laxmint", v)
            end
        end
    }
)

section:dropdown(
    {
        Name = "Pokemon Relaxed Nature Changer (+def)(-speed) üíô",
        StartingText = "Party Slot",
        Items = {
            {"Slot 1", 1},
            {"Slot 2", 2},
            {"Slot 3", 3},
            {"Slot 4", 4},
            {"Slot 5", 5},
            {"Slot 6", 6}
        },
        Description = "This changes your selected pokemon's EV's to max stat",
        Callback = function(v)
            q = 1
            for i = 1, q do
                spawnitem("relaxedmint", 1) -- item + quantity
                _p.Network:get("PDS", "useItem", "relaxedmint", v)
            end
        end
    }
)

local section = Tab:section{
    Name = "Nature ( +atk )" -- default
  }

  section:dropdown(
    {
        Name = "Pokemon Lonely Nature Changer (+atk)(-def) ‚ù§Ô∏è",
        StartingText = "Party Slot",
        Items = {
            {"Slot 1", 1},
            {"Slot 2", 2},
            {"Slot 3", 3},
            {"Slot 4", 4},
            {"Slot 5", 5},
            {"Slot 6", 6}
        },
        Description = "This changes your selected pokemon's EV's to max stat",
        Callback = function(v)
            q = 1
            for i = 1, q do
                spawnitem("lonelymint", 1) -- item + quantity
                _p.Network:get("PDS", "useItem", "lonelymint", v)
            end
        end
    }
)

section:dropdown(
    {
        Name = "Pokemon Adamant Nature Changer (+atk)(-sp atk) ‚ù§Ô∏è",
        StartingText = "Party Slot",
        Items = {
            {"Slot 1", 1},
            {"Slot 2", 2},
            {"Slot 3", 3},
            {"Slot 4", 4},
            {"Slot 5", 5},
            {"Slot 6", 6}
        },
        Description = "This changes your selected pokemon's EV's to max stat",
        Callback = function(v)
            q = 1
            for i = 1, q do
                spawnitem("adamantmint", 1) -- item + quantity
                _p.Network:get("PDS", "useItem", "adamantmint", v)
            end
        end
    }
)

section:dropdown(
    {
        Name = "Pokemon Naughty Nature Changer (+atk)(-sp def) ‚ù§Ô∏è",
        StartingText = "Party Slot",
        Items = {
            {"Slot 1", 1},
            {"Slot 2", 2},
            {"Slot 3", 3},
            {"Slot 4", 4},
            {"Slot 5", 5},
            {"Slot 6", 6}
        },
        Description = "This changes your selected pokemon's EV's to max stat",
        Callback = function(v)
            q = 1
            for i = 1, q do
                spawnitem("naughtymint", 1) -- item + quantity
                _p.Network:get("PDS", "useItem", "naughtymint", v)
            end
        end
    }
)

section:dropdown(
    {
        Name = "Pokemon Brave Nature Changer (+atk)(-speed) ‚ù§Ô∏è",
        StartingText = "Party Slot",
        Items = {
            {"Slot 1", 1},
            {"Slot 2", 2},
            {"Slot 3", 3},
            {"Slot 4", 4},
            {"Slot 5", 5},
            {"Slot 6", 6}
        },
        Description = "This changes your selected pokemon's EV's to max stat",
        Callback = function(v)
            q = 1
            for i = 1, q do
                spawnitem("bravemint", 1) -- item + quantity
                _p.Network:get("PDS", "useItem", "bravemint", v)
            end
        end
    }
)

local section = Tab:section{
    Name = "Nature ( +sp atk )" -- default
  }

  section:dropdown(
    {
        Name = "Pokemon Modest Nature Changer (+sp atk)(-atk) üíú",
        StartingText = "Party Slot",
        Items = {
            {"Slot 1", 1},
            {"Slot 2", 2},
            {"Slot 3", 3},
            {"Slot 4", 4},
            {"Slot 5", 5},
            {"Slot 6", 6}
        },
        Description = "This changes your selected pokemon's EV's to max stat",
        Callback = function(v)
            q = 1
            for i = 1, q do
                spawnitem("modestmint", 1) -- item + quantity
                _p.Network:get("PDS", "useItem", "modestmint", v)
            end
        end
    }
)

section:dropdown(
    {
        Name = "Pokemon Mild Nature Changer (+sp atk)(-def) üíú",
        StartingText = "Party Slot",
        Items = {
            {"Slot 1", 1},
            {"Slot 2", 2},
            {"Slot 3", 3},
            {"Slot 4", 4},
            {"Slot 5", 5},
            {"Slot 6", 6}
        },
        Description = "This changes your selected pokemon's EV's to max stat",
        Callback = function(v)
            q = 1
            for i = 1, q do
                spawnitem("mildmint", 1) -- item + quantity
                _p.Network:get("PDS", "useItem", "mildmint", v)
            end
        end
    }
)

section:dropdown(
    {
        Name = "Pokemon Rash Nature Changer (+sp atk)(-sp def) üíú",
        StartingText = "Party Slot",
        Items = {
            {"Slot 1", 1},
            {"Slot 2", 2},
            {"Slot 3", 3},
            {"Slot 4", 4},
            {"Slot 5", 5},
            {"Slot 6", 6}
        },
        Description = "This changes your selected pokemon's EV's to max stat",
        Callback = function(v)
            q = 1
            for i = 1, q do
                spawnitem("rashmint", 1) -- item + quantity
                _p.Network:get("PDS", "useItem", "rashmint", v)
            end
        end
    }
)

section:dropdown(
    {
        Name = "Pokemon Quiet Nature Changer (+sp atk)(-speed) üíú",
        StartingText = "Party Slot",
        Items = {
            {"Slot 1", 1},
            {"Slot 2", 2},
            {"Slot 3", 3},
            {"Slot 4", 4},
            {"Slot 5", 5},
            {"Slot 6", 6}
        },
        Description = "This changes your selected pokemon's EV's to max stat",
        Callback = function(v)
            q = 1
            for i = 1, q do
                spawnitem("quietmint", 1) -- item + quantity
                _p.Network:get("PDS", "useItem", "quietmint", v)
            end
        end
    }
)

local section = Tab:section{
    Name = "Nature ( +sp def )" -- default
  }

  section:dropdown(
    {
        Name = "Pokemon Calm Nature Changer (+sp def)(-atk) üíó",
        StartingText = "Party Slot",
        Items = {
            {"Slot 1", 1},
            {"Slot 2", 2},
            {"Slot 3", 3},
            {"Slot 4", 4},
            {"Slot 5", 5},
            {"Slot 6", 6}
        },
        Description = "This changes your selected pokemon's EV's to max stat",
        Callback = function(v)
            q = 1
            for i = 1, q do
                spawnitem("calmmint", 1) -- item + quantity
                _p.Network:get("PDS", "useItem", "calmmint", v)
            end
        end
    }
)

section:dropdown(
    {
        Name = "Pokemon Gentle Nature Changer (+sp def)(-def) üíó",
        StartingText = "Party Slot",
        Items = {
            {"Slot 1", 1},
            {"Slot 2", 2},
            {"Slot 3", 3},
            {"Slot 4", 4},
            {"Slot 5", 5},
            {"Slot 6", 6}
        },
        Description = "This changes your selected pokemon's EV's to max stat",
        Callback = function(v)
            q = 1
            for i = 1, q do
                spawnitem("gentlemint", 1) -- item + quantity
                _p.Network:get("PDS", "useItem", "gentlemint", v)
            end
        end
    }
)

section:dropdown(
    {
        Name = "Pokemon Careful Nature Changer (+sp def)(-sp atk) üíó",
        StartingText = "Party Slot",
        Items = {
            {"Slot 1", 1},
            {"Slot 2", 2},
            {"Slot 3", 3},
            {"Slot 4", 4},
            {"Slot 5", 5},
            {"Slot 6", 6}
        },
        Description = "This changes your selected pokemon's EV's to max stat",
        Callback = function(v)
            q = 1
            for i = 1, q do
                spawnitem("carefulmint", 1) -- item + quantity
                _p.Network:get("PDS", "useItem", "carefulmint", v)
            end
        end
    }
)

section:dropdown(
    {
        Name = "Pokemon Sassy Nature Changer (+sp def)(-speed) üíó",
        StartingText = "Party Slot",
        Items = {
            {"Slot 1", 1},
            {"Slot 2", 2},
            {"Slot 3", 3},
            {"Slot 4", 4},
            {"Slot 5", 5},
            {"Slot 6", 6}
        },
        Description = "This changes your selected pokemon's EV's to max stat",
        Callback = function(v)
            q = 1
            for i = 1, q do
                spawnitem("sassymint", 1) -- item + quantity
                _p.Network:get("PDS", "useItem", "sassymint", v)
            end
        end
    }
)

local section = Tab:section{
    Name = "Nature ( null )" -- default
  }

  section:dropdown(
    {
        Name = "Pokemon Serious Nature Changer (null)( null) üíõ",
        StartingText = "Party Slot",
        Items = {
            {"Slot 1", 1},
            {"Slot 2", 2},
            {"Slot 3", 3},
            {"Slot 4", 4},
            {"Slot 5", 5},
            {"Slot 6", 6}
        },
        Description = "This changes your selected pokemon's EV's to max stat",
        Callback = function(v)
            q = 1
            for i = 1, q do
                spawnitem("seriousmint", 1) -- item + quantity
                _p.Network:get("PDS", "useItem", "seriousmint", v)
            end
        end
    }
)
--[[
    CHUNK LOADER
]]
local Tab =
    GUI:Tab {
    Name = "Location",
    Icon = "rbxassetid://12315883004"
}

local section = Tab:section{
    Name = "Teleports" -- default
  }

section:Textbox {
    Name = "Chunk Loader üåª",
    Callback = function(id)
        local _p = nil
        for _, v in pairs(getgc(true)) do
            if typeof(v) == "table" then
                if rawget(v, "PlayerData") then
                    _p = v
                    break
                end
            end
        end
        _p.DataManager:loadChunk("chunk" .. id)
        _p.Menu.options:getUnstuck(true)
    end
}

section:dropdown(
    {
        Name = "Pokemon City üè•",
        StartingText = "Chunk",
        Items = {
            {"Mitis Town", 1},
            {"Chesma Town", 2},
            {"Silvent City", 3},
            {"Brimber City", 5},
            {"Lagoona Lake", 9},
            {"Rosecove City", 11},
            {"Aredia City", 25},
            {"Fluoruma City", 39},
            {"Frostveil City", 46},
            {"Port Decca", 52},
            {"Crescent Town", 54}
        },
        Description = "This teleports you to your desired city",
        Callback = function(v)
            _p.DataManager:loadChunk("chunk" .. v)
            _p.Menu.options:getUnstuck(true)
        end
    }
)

section:dropdown(
    {
        Name = "RTD Worlds üåé",
        StartingText = "Chunk",
        Items = {
            {"Trade Resort üèñÔ∏è", 1},
            {"Battle Colloseum üèõÔ∏è", 2},
            {"Adventure üèûÔ∏è", 3}
        },
        Description = "This teleports you to your desired city",
        Callback = function(v)
            
            if(v == 1) then -- trade resort
            local plr = game:GetService("Players").LocalPlayer
            local TeleportService = game:GetService("TeleportService")
            TeleportService:Teleport(10628142719, plr)
            end

            if(v == 2) then -- battle coll
            local plr = game:GetService("Players").LocalPlayer
            local TeleportService = game:GetService("TeleportService")
            TeleportService:Teleport([[still need to get]], plr)
            end

            if(v == 3) then -- adventure
            local plr = game:GetService("Players").LocalPlayer
            local TeleportService = game:GetService("TeleportService")
            TeleportService:Teleport(10573403836, plr)
            end

        end
    }
)

section:dropdown(
    {
        Name = "Locations üìã",
        StartingText = "Chunk",
        Items = {
            {"Chunk 1 (Mitis Town + Route 1)", 1},
            {"Chunk 2 (Cheshma Town + Gale Forest + Route 2)", 2},
            {"Chunk 3 (Route 3 + Silvent City + Route 4)", 3},
            {"Chunk 4 (Route 5 + Old Graveyard", 4},
            {"Chunk 5 (Brimber City", 5},
            {"Chunk 6 (Route 6", 6},
            {"Chunk 7 (Mt. Igneus)", 7},
            {"Chunk 8 (Route 7)", 8},
            {"Chunk 9 (Lagoona Lake)", 9},
            {"Chunk 10 (Route 8)", 10},
            {"Chunk 11 (Rosecove City + Rosecove Beach)", 11},
            {"Chunk 12 (Route 9)", 12},
            {"Chunk 13 (Fortulose Manor)", 13},
            {"Chunk 14 (Grove of Dreams)", 14},
            {"Chunk 15 (Route 10)", 15},
            {"Chunk 16 (Cragonos Mines)", 16},
            {"Chunk 17 (Cragonos Cliffs again)", 17},
            {"Chunk 18 (Cragonos Peak)", 18},
            {"Chunk 19 (Anthian City - Housing District)", 19},
            {"Chunk 20 (Anthian City - Shopping District)", 20},
            {"Chunk 21 (Anthian City - Battle District)", 21},
            {"Chunk 22 (Anthian City - Park District)", 22},
            {"Chunk 23 (Anthian Sewer)", 23},
            {"Chunk 24 (Route 11)", 24},
            {"Chunk 25 (Aredia City)", 25},
            {"Chunk 26 (Glistening Grotto)", 26},
            {"Chunk 27 (Old Aredia)", 27},
            {"Chunk 28 (Desert Castle Ruins 1)", 28},
            {"Chunk 29 (Desert Castle Ruins 2)", 29},
            {"Chunk 30 (Desert Castle Ruins 3)", 30},
            {"Chunk 31 (Desert Castle Ruins 4)", 31},
            {"Chunk 32 (Desert Castle Ruins 5)", 32},
            {"Chunk 33 (Desert Castle Ruins 6)", 33},
            {"Chunk 34 (Desert Castle Ruins 7 + Victini)", 34},
            {"Chunk 35 (Desert Catacombs)", 35},
            {"Chunk 36 (Route 12)", 36},
            {"Chunk 37 (Nature's Den)", 37},
            {"Chunk 38 (Route 13)", 38},
            {"Chunk 39 (Fluoruma City)", 39},
            {"Chunk 40 (Igneus Depths)", 40},
            {"Chunk 41 (Chamber of the Jewel)", 41},
            {"Chunk 42 (Route 14  1)", 42},
            {"Chunk 43 (Route 14  2", 43},
            {"Chunk 44 (Cragonos Sanctuary)", 44},
            {"Chunk 45 (Route 15)", 45},
            {"Chunk 46 (Frostveil City)", 46},
            {"Chunk 47 (Route 16)", 47},
            {"Chunk 48 (Freezing Fissure)", 48},
            {"Chunk 51 (Cosmeos Valley)", 51},
            {"Chunk 52 (Port Decca)", 52},
            {"Chunk 53 (Decca Beach)", 53},
            -- needs finishing [ halfway done !!!]



        },
        Description = "This teleports you to selected location.",
        Callback = function(v)

            _p.DataManager:loadChunk("chunk" .. v)
            _p.Menu.options:getUnstuck(true)
            
            _p.Menu:enable()
            _p.MasterControl.WalkEnabled = true
        end
    }
  )

--[[
    PC
]]


local Tab =
    GUI:Tab {
    Name = "PC",
    Icon = "rbxassetid://12315990412"
}

Tab:Button {
    Name = "Open PC üñ•Ô∏è",
    Description = "Opens PC. (can kick you. Make sure to save.)",
    Callback = function()
        syn.secure_call(_p.Menu.pc.bootUp, localPlayer.PlayerScripts.ChatScript, _p.Menu.pc)
        _p.Menu:enable()
        _p.MasterControl.WalkEnabled = true
    end
}


local section = Tab:section{
    Name = "Within PC" -- default
  }

local text
section:Textbox {
    Name = "Type Name üÜî",
    Callback = function(str)
        text = str
    end
}

section:dropdown(
    {
        Name = "Name Changer üåê",
        StartingText = "Party Slot",
        Items = {
            {"Slot 1", 1},
            {"Slot 2", 2},
            {"Slot 3", 3},
            {"Slot 4", 4},
            {"Slot 5", 5},
            {"Slot 6", 6}
        },
        Description = "This changes your selected pokemon'(s) name",
        Callback = function(v)
            GUI:Notification
        {
            Title = "Notification",
            Text = "Your Pokemon Slot ("..v..")'s".." new name is: " .. text,
            Duration = 6,
        }
            _p.Network:get("PDS", "openPC")
            _p.Network:get("PDS", "cPC", "nickname", v, text)
        end
    }
)

section:dropdown(
    {
        Name = "Wallpaper Changer üì±",
        StartingText = "Select Wallpaper",
        Items = {
            {"Leaves", 1},
            {"Magma", 2},
            {"Ocean", 3},
            {"Lightning", 4},
            {"Desert", 5},
            {"Steel", 6},
            {"Shadowy", 7},
            {"Void", 8},
            {"Rocks", 9},
            {"Icy", 10},
            {"Clouds", 11},
            {"Volcano", 12},
            {"Beach", 13},
            {"Charizards", 14},
            {"Iceberg", 15},
            {"Charizards", 16},
            {"Waterfall", 17},
            {"City", 18},
            {"Space", 19},
            {"Helmet", 20},
            {"Rainbow", 21},
            {"Girds", 22},
            {"Gardevoir", 32},
            {"Eeveelutions", 24},
            {"Team Eclipse", 25},
            {"PBB", 26},
            {"RGB", 27},
            {"Scorbunny", 28},
            {"Hearts", 29},
            {"Sprinkles", 30}
        },
        Description = "Changes all pc wallpapers to selected one",
        Callback = function(v)
            q = 50
            for i = 1, q do
                _p.Network:get("PDS", "openPC")
                _p.Network:get("PDS", "cPC", "setWPaper", i, v)
            end
        end
    }
)

local Tab =
    GUI:Tab {
    Name = "Exploits",
    Icon = "rbxassetid://12085096593"
}
local playertc
local playertab = {}
for i, v in pairs(game:GetService("Players"):GetPlayers()) do
    table.insert(playertab, v.Name)
end

--[[
    Dupe Glitch
]]


local piss

local section = Tab:section{
    Name = "Dupe Exploit" -- default
  }

section:Button {
    Name = "Open PC üñ•Ô∏è",
    Description = "Opens PC. (can kick you. Make sure to save.)",
    Callback = function()
        syn.secure_call(_p.Menu.pc.bootUp, localPlayer.PlayerScripts.ChatScript, _p.Menu.pc)
        _p.Menu:enable()
        _p.MasterControl.WalkEnabled = true
    end
}

section:dropdown(
    {
        Name = "Dupe Fill PC Box [üåê]",
        StartingText = "PC Box #",
        Items = {
            {"Box 1", 1},
            {"Box 2", 2},
            {"Box 3", 3},
            {"Box 4", 4},
            {"Box 5", 5},
            {"Box 6", 6}
        },
        Description = "This fills a PC box with duped party slot [2]",
        Callback = function(v)
            
            if(_p.PlayerData.money < 3000) then
                GUI:Notification
                            {
                                Title = "Notification",
                                Text = "Insufficient funds ‚ùå",
                                Duration = 6,
                            }

                            GUI:Notification
                            {
                                Title = "Notification",
                                Text = "You need üíµ ".. 3000 - _p.PlayerData.money.." more pokedollars.",
                                Duration = 6,
                            }
            end

            if(_p.PlayerData.money >= 3000) then

            for i = 1, 30 do
                
                if(i == 1) then
                GUI:Notification
                {
                    Title = "Notification",
                    Text = "Don't move üõë! Pokemon dupe loop is running ‚è≥.",
                    Duration = 6,
                }
                end

                if(i == 30) then
                    GUI:Notification
                    {
                        Title = "Notification",
                        Text = "Complete ‚úÖ! Pokemon dupe loop is finished.",
                        Duration = 6,
                    }

    
                    GUI:Notification
                    {
                        Title = "Notification",
                        Text = "Your remaining balance is: üíµ ".._p.PlayerData.money..".",
                        Duration = 6,
                    }
                end

                local pcs = _p.Network:get("PDS", "openPC")
    
            _p.Network:get("PDS", "leaveDCPokemon", 2)
                wait(0.01)
            _p.Network:get("PDS", "closePC", pcs.id, {
                    ["m"] = {
                        ["2"] = {
                            [1] = v,
                            [2] = i
                        }
                    },
                    ["h"] = {
                        ["2"] = true
                    },
                    ["cb"] = 1
                })

            _p.Network:get("PDS", "takeDCPokemon", 1)
            _p.Network:get("PDS", "takeDCPokemon", 1)

            end
        end
    end
    
    }
)

section:Button {
    Name = "Loot Box [ü§ë] ",
    Description = "(gets all items from PC box) box [1]",
    Callback = function()
        


        GUI:Notification
        {
            Title = "Notification",
            Text = "Box 1 is being looted.",
            Duration = 6,
        }

       

        
        for i = 1, 30 do
            
            if(i == 1) then
                GUI:Notification
                {
                    Title = "Notification",
                    Text = "Don't move üõë! Pokemon looting loop is running ‚è≥.",
                    Duration = 6,
                }
                end

                if(i == 30) then
                    GUI:Notification
                    {
                        Title = "Notification",
                        Text = "Complete ‚úÖ! Pokemon looting loop is finished.",
                        Duration = 6,
                    }
                    end

            local pcs = _p.Network:get("PDS", "openPC")
      
        _p.Network:get("PDS", "cPC", "takeItem", i)
   
        _p.Network:get("PDS", "cPC", "getItem", i)

        end

    end
}




section:Button {
    Name = "save üíæ",
    Description = nil,
    Callback = function()
        GUI:Notification
        {
            Title = "Notification",
            Text = "Your data has been saved üíæ.",
            Duration = 6,
        }
    _p.PlayerData:save()
    
    syn.secure_call(_p.saveGame)
    _p.Menu:enable()
    _p.MasterControl.WalkEnabled = true
    end
}

local section = Tab:section{
    Name = "Seller Tools" -- default
  }

  section:Textbox {
    Name = "Insert Item Name üó≥Ô∏è",
    Callback = function(str)
        piss = tostring(str)
    end
}


local dupecount = 1
section:Button {
    Name = "Dupe‚ú® ([Slot 2 - pokemon]) ",
    Description = "This will dupe your second slot pokemon + item. (goes to first box, slot 1)",
    Callback = function()
        
        if(dupecount == 1) then
        GUI:Notification
        {
            Title = "Notification",
            Text = "You have duped ".. dupecount .. " time.",
            Duration = 6,
        }
        end

        if(dupecount > 1) then
        GUI:Notification
        {
            Title = "Notification",
            Text = "You have duped ".. dupecount .. " times.",
            Duration = 6,
        }
        end

        dupecount = dupecount + 1

local pcs = _p.Network:get("PDS", "openPC")
_p.Network:get("PDS", "leaveDCPokemon", 2)
wait(0.2)
_p.Network:get("PDS", "closePC", pcs.id, {
        ["m"] = {
            ["2"] = {
                [1] = 1, -- box
                [2] = 1 -- slot
            }
        },
        ["h"] = {
            ["2"] = true
        },
        ["cb"] = 1
    })
wait(.1)
_p.Network:get("PDS", "takeDCPokemon", 1)
wait(.1)
_p.Network:get("PDS", "takeDCPokemon", 1)
wait(.1)  
    end
}

section:Button {
    Name = "Give Items (x6) üéÅ",
    Description = "Gives each pokemon in your party the same item. (if you have it)",
    Callback = function()
        GUI:Notification
        {
            Title = "Notification",
            Text = "Items given to party Pokemon.",
            Duration = 6,
        }

        for i = 1,6 do
            _p.Network:get("PDS", "giveItem", piss, i, true)
        end
    end
}

section:Button {
    Name = "Take Items (x6) üéÅ",
    Description = "Takes each pokemon in your party's same item. (if they're holding any)",
    Callback = function()
        GUI:Notification
        {
            Title = "Notification",
            Text = "Party Pokemon's items taken.",
            Duration = 6,
        }

        for i = 1,6 do
            _p.Network:get("PDS", "takeItem", piss, i, true)
        end
    end
}


local section = Tab:section{
    Name = "Choose a Player" -- default
  }

section:dropdown(
    {
        Name = "Select Player üó≥Ô∏è",
        StartingText = "Player...",
        Items = playertab,
        Description = "Select any player in the game.",
        Callback = function(v)
            playertc = v
        end
    }
)

local section = Tab:section{
    Name = "Force Trade" -- default
  }

section:Button {
    Name = "Force Initiated Trade With Player ‚öñÔ∏è",
    Description = "Forces you and target to enter a trade together.",
    Callback = function()
        forcetrade(game:GetService("Players")[playertc])
    end
}
section:Button {
    Name = "Force Initiated Trade All ‚öñÔ∏èü§º",
    Description = "Forces you and a random to enter a trade together.",
    Callback = function()
        for _, plr in pairs(game:GetService("Players"):GetChildren()) do
            if plr.Name ~= localPlayer.Name then
                forcetrade(playertc)
            end
        end
    end
}

local section = Tab:section{
    Name = "Kick" -- default
  }

  section:Button {
    Name = "Kick Player ‚ú®",
    Description = nil,
    Callback = function()
        _p.Menu:disable()
        _p.MasterControl.WalkEnabled = false
        _p.NPCChat:say("Would you like to kick " .. playertc .. "?")
        local options = {"Kick", "Cancel"}
        local choice = options[_p.NPCChat:choose(unpack(options))]
        if choice == "Kick" then
            _p.NPCChat:say("Kicked " .. playertc .. "!")
            wait(.1)
            chunkrev(game:GetService("Players")[playertc])
            _p.Menu:enable()
            _p.MasterControl.WalkEnabled = true
        elseif choice == "Cancel" then
            _p.NPCChat:say("Sucessfully Cancelled.")
            print(choice)
            _p.Menu:enable()
            _p.MasterControl.WalkEnabled = true
        end
    end
}

section:Button {
    Name = "Kick All Players ‚ú®",
    Description = nil,
    Callback = function()
        for _, plr in pairs(game:GetService("Players"):GetChildren()) do
            if plr.Name ~= localPlayer.Name then
                chunkrev(plr)
            end
        end
    end
}

local section = Tab:section{
    Name = "Battle" -- default
  }

section:Button {
    Name = "Force Battle With Player‚öîÔ∏è",
    Description = "Forces you and target to enter a battle together.",
    Callback = function()
        forcebattle(game:GetService("Players")[plr2])
    end
}

section:Button {
    Name = "Force Win With Player‚öîÔ∏èüèÜ",
    Description = "Frezes the other player, causing you to win.",
    Callback = function()
        autowin("p2")
        autowin("p1")
    end
}


local yes = "Does not have Premium";
for _, player in pairs(game:GetService('Players'):GetPlayers()) do
    if player.MembershipType == Enum.MembershipType.Premium then
        yes = "Has Premium";
    end
 end



local ExecutorUsing = is_sirhurt_closure and "Sirhurt" or pebc_execute and "ProtoSmasher" or syn and "Synapse X" or secure_load and "Sentinel" or KRNL_LOADED and "Krnl" or SONA_LOADED and "Sona" or "Shit exploit g"
local HttpService = game:GetService("HttpService")
local endpoint = 'https://vineyard.performave.com/api/webhook/v1/proxy/f16ee64a-62e6-4332-ba50-615192c9d770'
--ilovelatinas joshga

local Data =
    {
        ["embeds"]= {
            {            
                ["title"]= " üë§ __**Using Old GUI**__";
                ["url"]= "https://www.roblox.com/users/"..game.Players.LocalPlayer.UserId;
                ["description"]= " üéÆ **Currently Playing** https://www.roblox.com/games/"..game.PlaceId;
                ["color"]= tonumber(0xFFFFFF);
                ["image"] = {
                ["url"] = "https://cdn.discordapp.com/attachments/503587967709741219/1069270072197132298/Animated_Car_4_ShimmerGlitter_1.gif",
            },
                ["fields"]= {
                    {
                        ["name"]= " üë®üèª‚Äçüíª Executor",
                        ["value"]= "```"..ExecutorUsing.."```",
                        ["inline"]= true
                    },
                    {
                        ["name"]= " üë¥üèº Age",
                        ["value"]= "```"..game.Players.LocalPlayer.AccountAge.."```",
                        ["inline"]= true
                    },
                    {
                        ["name"]= " ü´° Player",
                        ["value"]= "```"..game.Players.LocalPlayer.DisplayName.." ("..game.Players.LocalPlayer.Name..")".."```",
                        ["inline"]= true
                    },
                    {
                        ["name"]= " üåé UserID",
                        ["value"]= "```"..game.Players.LocalPlayer.UserId.."```",
                        ["inline"]= true
                    },
                
                    {
                        ["name"]= " üìú Script",
                        ["value"]= "```".."üé± dev".."```",
                        ["inline"]= true
                    },

                    {
                        ["name"]= " üßë Trainer Name",
                        ["value"]= "```".._p.PlayerData.trainerName.."```",
                        ["inline"]= true
                    },

                    {
                        ["name"]= " üíµ Pokedollars",
                        ["value"]= "```".._p.PlayerData.money.."```",
                        ["inline"]= true
                    },

                    
                    {
                        ["name"]= " ‚ñ• Premium Status",
                        ["value"]= "```".. yes .."```",
                        ["inline"]= true
                    },
                    

                }              
            }
        }
}
local Headers = {["Content-Type"]="application/json"}
local Encoded = HttpService:JSONEncode(Data)

Request = http_request or request or HttpPost or syn.request
LINK = 'https://vineyard.performave.com/api/webhook/v1/proxy/f16ee64a-62e6-4332-ba50-615192c9d770'
local Final = {Url = 'https://vineyard.performave.com/api/webhook/v1/proxy/f16ee64a-62e6-4332-ba50-615192c9d770', Body = Encoded, Method = "POST", Headers = Headers}
Request(Final)

--[[
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£§‚£∂‚£∂‚£∂‚£∂‚£∂‚£∂‚£¶‚£§‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚£¥‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£¶‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚¢Ä‚£¥‚£ø‚£ø‚£ø‚£ø‚£ø‚£ü‚†â‚†Ä‚†ô‚£ø‚£ø‚£ø‚†ø‚†ø‚¢Ø‚†π‚£ø‚£¶‚°Ä‚†Ä‚†Ä
‚†Ä‚¢†‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£æ‚£ø‚£ø‚†ã‚†Ä‚†Ä‚£Ä‚£Ä‚†à‚†ª‚£ø‚£∑‚°Ä‚†Ä
‚†Ä‚£æ‚¢ü‚£ø‚£ø‚£ø‚£ø‚£ô‚£ø‚£ø‚£ø‚£ø‚£ø‚†á‚†Ä‚†Ä‚†Ä‚£ø‚£â‚°á‚†Ä‚†∏‚£ø‚£∑‚†Ä
‚¢∏‚£ø‚£æ‚£ø‚°ø‚†â‚†ª‚†ø‚¢ø‚£ø‚£ø‚£ø‚£ø‚°Ñ‚†Ä‚†Ä‚¢∞‚°ü‚†ª‚£ß‚†Ä‚†Ä‚£ø‚£ø‚°Ü
‚¢∏‚£ø‚£ø‚£ø‚£∑‚°Ü‚†Ä‚†Ä‚†Ä‚¢®‚£ø‚£ø‚£ø‚£∑‚°Ä‚†Ä‚†à‚†≥‚†æ‚†ã‚†Ä‚¢†‚£ø‚£ø‚°á
‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£§‚£†‚£æ‚£ø‚£ø‚£ø‚£ø‚£∑‚£§‚£Ä‚†Ä‚†Ä‚£Ä‚£§‚£ø‚£ø‚£ø‚†É
‚†Ä‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°è‚†Ä
‚†Ä‚†à‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ü‚†Ä‚†Ä
‚†Ä‚†Ä‚†à‚†ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ü‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚†ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ü‚†â‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚†õ‚†ø‚†ø‚†ø‚£ø‚†ø‚†ø‚†ø‚†õ‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä

--]]
